{"ast":null,"code":"import { extendContext, createElementObject, createPathComponent } from '@react-leaflet/core';\nimport L from 'leaflet';\nimport 'leaflet.markercluster';\nfunction getPropsAndEvents(props) {\n  let clusterProps = {};\n  let clusterEvents = {};\n  const {\n    children,\n    ...rest\n  } = props;\n  // Splitting props and events to different objects\n  Object.entries(rest).forEach(([propName, prop]) => {\n    if (propName.startsWith('on')) {\n      clusterEvents = {\n        ...clusterEvents,\n        [propName]: prop\n      };\n    } else {\n      clusterProps = {\n        ...clusterProps,\n        [propName]: prop\n      };\n    }\n  });\n  return {\n    clusterProps,\n    clusterEvents\n  };\n}\nfunction createMarkerClusterGroup(props, context) {\n  const {\n    clusterProps,\n    clusterEvents\n  } = getPropsAndEvents(props);\n  const markerClusterGroup = new L.MarkerClusterGroup(clusterProps);\n  Object.entries(clusterEvents).forEach(([eventAsProp, callback]) => {\n    const clusterEvent = `cluster${eventAsProp.substring(2).toLowerCase()}`;\n    markerClusterGroup.on(clusterEvent, callback);\n  });\n  return createElementObject(markerClusterGroup, extendContext(context, {\n    layerContainer: markerClusterGroup\n  }));\n}\nconst updateMarkerCluster = (instance, props, prevProps) => {\n  //TODO when prop change update instance\n  //   if (props. !== prevProps.center || props.size !== prevProps.size) {\n  //   instance.setBounds(getBounds(props))\n  // }\n};\nconst MarkerClusterGroup = createPathComponent(createMarkerClusterGroup, updateMarkerCluster);\nexport default MarkerClusterGroup;","map":{"version":3,"names":["extendContext","createElementObject","createPathComponent","L","getPropsAndEvents","props","clusterProps","clusterEvents","children","rest","Object","entries","forEach","propName","prop","startsWith","createMarkerClusterGroup","context","markerClusterGroup","MarkerClusterGroup","eventAsProp","callback","clusterEvent","substring","toLowerCase","on","layerContainer","updateMarkerCluster","instance","prevProps"],"sources":["C:/Users/SIDDU/Dev_Projects/directions-app/map-app/frontend/node_modules/react-leaflet-cluster/dist/index.js"],"sourcesContent":["import { extendContext, createElementObject, createPathComponent, } from '@react-leaflet/core';\nimport L from 'leaflet';\nimport 'leaflet.markercluster';\nfunction getPropsAndEvents(props) {\n    let clusterProps = {};\n    let clusterEvents = {};\n    const { children, ...rest } = props;\n    // Splitting props and events to different objects\n    Object.entries(rest).forEach(([propName, prop]) => {\n        if (propName.startsWith('on')) {\n            clusterEvents = { ...clusterEvents, [propName]: prop };\n        }\n        else {\n            clusterProps = { ...clusterProps, [propName]: prop };\n        }\n    });\n    return { clusterProps, clusterEvents };\n}\nfunction createMarkerClusterGroup(props, context) {\n    const { clusterProps, clusterEvents } = getPropsAndEvents(props);\n    const markerClusterGroup = new L.MarkerClusterGroup(clusterProps);\n    Object.entries(clusterEvents).forEach(([eventAsProp, callback]) => {\n        const clusterEvent = `cluster${eventAsProp.substring(2).toLowerCase()}`;\n        markerClusterGroup.on(clusterEvent, callback);\n    });\n    return createElementObject(markerClusterGroup, extendContext(context, { layerContainer: markerClusterGroup }));\n}\nconst updateMarkerCluster = (instance, props, prevProps) => {\n    //TODO when prop change update instance\n    //   if (props. !== prevProps.center || props.size !== prevProps.size) {\n    //   instance.setBounds(getBounds(props))\n    // }\n};\nconst MarkerClusterGroup = createPathComponent(createMarkerClusterGroup, updateMarkerCluster);\nexport default MarkerClusterGroup;\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,mBAAmB,EAAEC,mBAAmB,QAAS,qBAAqB;AAC9F,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,uBAAuB;AAC9B,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAC9B,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAIC,aAAa,GAAG,CAAC,CAAC;EACtB,MAAM;IAAEC,QAAQ;IAAE,GAAGC;EAAK,CAAC,GAAGJ,KAAK;EACnC;EACAK,MAAM,CAACC,OAAO,CAACF,IAAI,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAEC,IAAI,CAAC,KAAK;IAC/C,IAAID,QAAQ,CAACE,UAAU,CAAC,IAAI,CAAC,EAAE;MAC3BR,aAAa,GAAG;QAAE,GAAGA,aAAa;QAAE,CAACM,QAAQ,GAAGC;MAAK,CAAC;IAC1D,CAAC,MACI;MACDR,YAAY,GAAG;QAAE,GAAGA,YAAY;QAAE,CAACO,QAAQ,GAAGC;MAAK,CAAC;IACxD;EACJ,CAAC,CAAC;EACF,OAAO;IAAER,YAAY;IAAEC;EAAc,CAAC;AAC1C;AACA,SAASS,wBAAwBA,CAACX,KAAK,EAAEY,OAAO,EAAE;EAC9C,MAAM;IAAEX,YAAY;IAAEC;EAAc,CAAC,GAAGH,iBAAiB,CAACC,KAAK,CAAC;EAChE,MAAMa,kBAAkB,GAAG,IAAIf,CAAC,CAACgB,kBAAkB,CAACb,YAAY,CAAC;EACjEI,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACK,OAAO,CAAC,CAAC,CAACQ,WAAW,EAAEC,QAAQ,CAAC,KAAK;IAC/D,MAAMC,YAAY,GAAG,UAAUF,WAAW,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EAAE;IACvEN,kBAAkB,CAACO,EAAE,CAACH,YAAY,EAAED,QAAQ,CAAC;EACjD,CAAC,CAAC;EACF,OAAOpB,mBAAmB,CAACiB,kBAAkB,EAAElB,aAAa,CAACiB,OAAO,EAAE;IAAES,cAAc,EAAER;EAAmB,CAAC,CAAC,CAAC;AAClH;AACA,MAAMS,mBAAmB,GAAGA,CAACC,QAAQ,EAAEvB,KAAK,EAAEwB,SAAS,KAAK;EACxD;EACA;EACA;EACA;AAAA,CACH;AACD,MAAMV,kBAAkB,GAAGjB,mBAAmB,CAACc,wBAAwB,EAAEW,mBAAmB,CAAC;AAC7F,eAAeR,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}